name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
      env:
        REDIS_HOST: localhost
        REDIS_PORT: 6379
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'

  build:
    needs: [test, lint, security]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Build binaries
      run: |
        CGO_ENABLED=0 GOOS=linux go build -ldflags="-w -s" -o bin/subconverter-linux ./cmd/subconverter
        CGO_ENABLED=0 GOOS=darwin go build -ldflags="-w -s" -o bin/subconverter-darwin ./cmd/subconverter
        CGO_ENABLED=0 GOOS=windows go build -ldflags="-w -s" -o bin/subconverter-windows.exe ./cmd/subconverter
        
        CGO_ENABLED=0 GOOS=linux go build -ldflags="-w -s" -o bin/subctl-linux ./cmd/subctl
        CGO_ENABLED=0 GOOS=darwin go build -ldflags="-w -s" -o bin/subctl-darwin ./cmd/subctl
        CGO_ENABLED=0 GOOS=windows go build -ldflags="-w -s" -o bin/subctl-windows.exe ./cmd/subctl
        
        CGO_ENABLED=0 GOOS=linux go build -ldflags="-w -s" -o bin/subworker-linux ./cmd/subworker
        CGO_ENABLED=0 GOOS=darwin go build -ldflags="-w -s" -o bin/subworker-darwin ./cmd/subworker
        CGO_ENABLED=0 GOOS=windows go build -ldflags="-w -s" -o bin/subworker-windows.exe ./cmd/subworker
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries
        path: bin/

  docker:
    needs: [test, lint, security]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    if: github.event_name == 'release'
    needs: [build, docker]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: binaries
        path: bin/
    
    - name: Create release assets
      run: |
        tar -czf subconverter-linux-amd64.tar.gz -C bin subconverter-linux subctl-linux subworker-linux
        tar -czf subconverter-darwin-amd64.tar.gz -C bin subconverter-darwin subctl-darwin subworker-darwin
        zip subconverter-windows-amd64.zip bin/subconverter-windows.exe bin/subctl-windows.exe bin/subworker-windows.exe
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          subconverter-linux-amd64.tar.gz
          subconverter-darwin-amd64.tar.gz
          subconverter-windows-amd64.zip
        tag_name: ${{ github.ref_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}